#!/usr/bin/env python3
"""
Script de test pour v√©rifier que le g√©n√©rateur Euromillions ne produit pas de doublons
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.euromillions_generator import EuromillionsAdvancedGenerator
from app.euromillions_advanced_stats import EuromillionsAdvancedStats
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

def test_generator_no_duplicates():
    """Test que le g√©n√©rateur ne produit pas de doublons"""
    print("üß™ Test du g√©n√©rateur Euromillions - V√©rification des doublons")
    print("=" * 60)
    
    # Cr√©er une session de base de donn√©es
    engine = create_engine('sqlite:///lotto.db')
    Session = sessionmaker(bind=engine)
    session = Session()
    
    # Initialiser le g√©n√©rateur
    generator = EuromillionsAdvancedGenerator(session)
    stats_calculator = EuromillionsAdvancedStats(session)
    
    # Obtenir les statistiques
    stats = stats_calculator.get_comprehensive_stats()
    
    # Tester diff√©rentes strat√©gies
    strategies = ['balanced', 'frequency', 'hot', 'cold', 'pattern']
    
    for strategy in strategies:
        print(f"\nüìä Test de la strat√©gie: {strategy}")
        print("-" * 40)
        
        # G√©n√©rer 10 grilles avec cette strat√©gie
        grids = generator.generate_multiple_grids(10, strategy)
        
        for i, grid in enumerate(grids, 1):
            numbers = grid['numbers']
            stars = grid['stars']
            
            # V√©rifier les doublons dans les num√©ros
            if len(numbers) != len(set(numbers)):
                print(f"‚ùå Grille {i}: DOUBLONS D√âTECT√âS dans les num√©ros!")
                print(f"   Num√©ros: {numbers}")
                print(f"   Doublons: {[n for n in numbers if numbers.count(n) > 1]}")
                return False
            
            # V√©rifier les doublons dans les √©toiles
            if len(stars) != len(set(stars)):
                print(f"‚ùå Grille {i}: DOUBLONS D√âTECT√âS dans les √©toiles!")
                print(f"   √âtoiles: {stars}")
                print(f"   Doublons: {[s for s in stars if stars.count(s) > 1]}")
                return False
            
            # V√©rifier que les num√©ros sont dans la bonne plage
            if not all(1 <= n <= 50 for n in numbers):
                print(f"‚ùå Grille {i}: Num√©ros hors plage!")
                print(f"   Num√©ros: {numbers}")
                return False
            
            # V√©rifier que les √©toiles sont dans la bonne plage
            if not all(1 <= s <= 12 for s in stars):
                print(f"‚ùå Grille {i}: √âtoiles hors plage!")
                print(f"   √âtoiles: {stars}")
                return False
            
            print(f"‚úÖ Grille {i}: {numbers} | √âtoiles: {stars}")
    
    print("\nüéâ TOUS LES TESTS PASS√âS! Aucun doublon d√©tect√©.")
    return True

def test_simple_generator():
    """Test du g√©n√©rateur simple"""
    print("\nüß™ Test du g√©n√©rateur simple")
    print("=" * 40)
    
    # Simuler le g√©n√©rateur simple
    import random
    
    def generate_simple_grid():
        numbers = []
        while len(numbers) < 5:
            num = random.randint(1, 50)
            if num not in numbers:
                numbers.append(num)
        return sorted(numbers)
    
    # Tester 20 grilles
    for i in range(1, 21):
        grid = generate_simple_grid()
        if len(grid) != len(set(grid)):
            print(f"‚ùå Grille {i}: DOUBLONS D√âTECT√âS!")
            print(f"   Num√©ros: {grid}")
            return False
        print(f"‚úÖ Grille {i}: {grid}")
    
    print("üéâ G√©n√©rateur simple OK!")
    return True

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de g√©n√©ration...")
    
    # Test du g√©n√©rateur simple
    simple_ok = test_simple_generator()
    
    # Test du g√©n√©rateur avanc√©
    advanced_ok = test_generator_no_duplicates()
    
    if simple_ok and advanced_ok:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úÖ Aucun doublon d√©tect√© dans les g√©n√©rateurs")
    else:
        print("\n‚ùå DES PROBL√àMES ONT √âT√â D√âTECT√âS!")
        sys.exit(1) 