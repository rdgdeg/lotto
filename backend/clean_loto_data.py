#!/usr/bin/env python3
"""
Script pour nettoyer toutes les donn√©es de test du Loto
"""

import sqlite3
import os

def clean_loto_data():
    """Supprimer toutes les donn√©es de test du Loto"""
    
    # Chemin vers la base de donn√©es
    db_path = "./lotto.db"
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Compter les tirages avant suppression
        cursor.execute("SELECT COUNT(*) FROM draws_loto")
        count_before = cursor.fetchone()[0]
        
        print(f"üìä Tirages trouv√©s avant nettoyage: {count_before}")
        
        if count_before == 0:
            print("‚úÖ Base de donn√©es d√©j√† vide")
            return
        
        # Supprimer tous les tirages
        cursor.execute("DELETE FROM draws_loto")
        
        # Compter les tirages apr√®s suppression
        cursor.execute("SELECT COUNT(*) FROM draws_loto")
        count_after = cursor.fetchone()[0]
        
        # Valider les changements
        conn.commit()
        
        print(f"üóëÔ∏è  {count_before - count_after} tirages supprim√©s")
        print(f"‚úÖ Base de donn√©es nettoy√©e ({count_after} tirages restants)")
        
        # V√©rifier que la table est vide
        cursor.execute("SELECT COUNT(*) FROM draws_loto")
        final_count = cursor.fetchone()[0]
        
        if final_count == 0:
            print("‚úÖ Nettoyage r√©ussi - Base de donn√©es vide")
        else:
            print(f"‚ö†Ô∏è  Attention: {final_count} tirages restent dans la base")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    print("üßπ Nettoyage des donn√©es de test du Loto...")
    clean_loto_data()
    print("‚úÖ Script termin√©") 