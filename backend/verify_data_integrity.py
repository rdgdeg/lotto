#!/usr/bin/env python3
"""
Script pour v√©rifier l'int√©grit√© des donn√©es et afficher un r√©sum√© complet.
"""

import sqlite3
import requests
from datetime import datetime

def verify_data_integrity():
    """V√©rifie l'int√©grit√© des donn√©es et affiche un r√©sum√© complet"""
    
    print("üîç V√âRIFICATION DE L'INT√âGRIT√â DES DONN√âES")
    print("=" * 60)
    
    # 1. V√©rification directe de la base de donn√©es
    print("\nüìä V√âRIFICATION DIRECTE DE LA BASE DE DONN√âES:")
    print("-" * 40)
    
    conn = sqlite3.connect('./lotto.db')
    cursor = conn.cursor()
    
    try:
        # Compter les tirages Euromillions
        cursor.execute("SELECT COUNT(*) FROM draws_euromillions")
        euromillions_count = cursor.fetchone()[0]
        
        # Compter les tirages Loto
        cursor.execute("SELECT COUNT(*) FROM draws_loto")
        loto_count = cursor.fetchone()[0]
        
        print(f"üé∞ Euromillions: {euromillions_count} tirages")
        print(f"üçÄ Loto: {loto_count} tirages")
        
        # V√©rifier les ann√©es disponibles
        cursor.execute("SELECT DISTINCT strftime('%Y', date) as year FROM draws_euromillions ORDER BY year DESC")
        euromillions_years = [row[0] for row in cursor.fetchall()]
        
        cursor.execute("SELECT DISTINCT strftime('%Y', date) as year FROM draws_loto ORDER BY year DESC")
        loto_years = [row[0] for row in cursor.fetchall()]
        
        print(f"üìÖ Ann√©es Euromillions: {', '.join(euromillions_years)}")
        print(f"üìÖ Ann√©es Loto: {', '.join(loto_years)}")
        
        # V√©rifier les derniers tirages
        cursor.execute("SELECT date, n1, n2, n3, n4, n5, e1, e2 FROM draws_euromillions ORDER BY date DESC LIMIT 5")
        last_euromillions = cursor.fetchall()
        
        print(f"\nüìÖ Derniers tirages Euromillions:")
        for draw in last_euromillions:
            print(f"  - {draw[0]}: Num√©ros {draw[1:6]} - √âtoiles {draw[6:8]}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la base: {e}")
    finally:
        conn.close()
    
    # 2. V√©rification via l'API
    print("\nüåê V√âRIFICATION VIA L'API:")
    print("-" * 40)
    
    try:
        # Test API Summary
        response = requests.get("http://localhost:8000/api/history/summary")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API Summary - Euromillions: {data['euromillions']['total_draws']} tirages")
            print(f"‚úÖ API Summary - Loto: {data['loto']['total_draws']} tirages")
        else:
            print(f"‚ùå Erreur API Summary: {response.status_code}")
            
        # Test API History avec diff√©rentes limites
        for limit in [100, 1000]:
            response = requests.get(f"http://localhost:8000/api/history/euromillions?limit={limit}")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API History (limit={limit}) - Total: {data['total_draws']}, Retourn√©s: {data.get('draws_returned', len(data['draws']))}")
            else:
                print(f"‚ùå Erreur API History (limit={limit}): {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification API: {e}")
    
    # 3. Comparaison et conclusion
    print("\nüîç COMPARAISON ET CONCLUSION:")
    print("-" * 40)
    
    if euromillions_count == data['euromillions']['total_draws']:
        print("‚úÖ COH√âRENCE: Les donn√©es de la base et de l'API correspondent")
    else:
        print("‚ùå INCOH√âRENCE: Les donn√©es de la base et de l'API ne correspondent pas")
    
    print(f"\nüìã R√âSUM√â FINAL:")
    print(f"   ‚Ä¢ Base de donn√©es: {euromillions_count} tirages Euromillions")
    print(f"   ‚Ä¢ API Summary: {data['euromillions']['total_draws']} tirages Euromillions")
    print(f"   ‚Ä¢ Limite API History: 1000 tirages maximum")
    print(f"   ‚Ä¢ Tirages manquants: {euromillions_count - 1000} (si > 1000)")
    
    if euromillions_count > 1000:
        print(f"\n‚ö†Ô∏è ATTENTION: L'interface ne peut afficher que 1000 tirages maximum")
        print(f"   Les {euromillions_count - 1000} tirages les plus anciens ne sont pas visibles")
        print(f"   Solution: Utilisez les filtres par ann√©e pour voir tous les tirages")

if __name__ == "__main__":
    verify_data_integrity() 