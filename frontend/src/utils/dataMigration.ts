// Script de migration des donn√©es du backend vers le frontend
import { localDataManager } from './localDataManager';

export async function migrateDataFromBackend() {
  try {
    console.log('üîÑ D√©but de la migration des donn√©es...');
    
    // Migrer les donn√©es Loto
    console.log('üìä Migration des donn√©es Loto...');
    const lotoResponse = await fetch('http://localhost:8000/api/loto/?limit=3000');
    if (lotoResponse.ok) {
      const lotoData = await lotoResponse.json();
      const lotoDraws = lotoData.draws.map((draw: any) => ({
        date: draw.date,
        n1: draw.numeros[0],
        n2: draw.numeros[1],
        n3: draw.numeros[2],
        n4: draw.numeros[3],
        n5: draw.numeros[4],
        n6: draw.numeros[5],
        complementaire: draw.complementaire
      }));
      
      await localDataManager.importLotoData(lotoDraws);
      console.log(`‚úÖ ${lotoDraws.length} tirages Loto migr√©s`);
    } else {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es Loto du backend');
    }
    
    // Migrer les donn√©es Euromillions
    console.log('‚≠ê Migration des donn√©es Euromillions...');
    const euromillionsResponse = await fetch('http://localhost:8000/api/euromillions/?limit=3000');
    if (euromillionsResponse.ok) {
      const euromillionsData = await euromillionsResponse.json();
      const euromillionsDraws = euromillionsData.draws.map((draw: any) => ({
        date: draw.date,
        n1: draw.numeros[0],
        n2: draw.numeros[1],
        n3: draw.numeros[2],
        n4: draw.numeros[3],
        n5: draw.numeros[4],
        e1: draw.etoiles[0],
        e2: draw.etoiles[1]
      }));
      
      await localDataManager.importEuromillionsData(euromillionsDraws);
      console.log(`‚úÖ ${euromillionsDraws.length} tirages Euromillions migr√©s`);
    } else {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es Euromillions du backend');
    }
    
    console.log('üéâ Migration termin√©e avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    return false;
  }
}

// Fonction pour v√©rifier si la migration est n√©cessaire
export async function checkMigrationNeeded() {
  try {
    const lotoStats = await localDataManager.getLotoStats();
    const euromillionsStats = await localDataManager.getEuromillionsStats();
    
    const needsMigration = 
      lotoStats.total_draws === 0 || 
      euromillionsStats.total_draws === 0;
    
    return needsMigration;
  } catch (error) {
    console.error('Erreur lors de la v√©rification:', error);
    return true; // En cas d'erreur, on suppose qu'il faut migrer
  }
} 